{
  "name": "Ruby-procinfo",
  "tagline": "A very simple Ruby/C extension to (at the moment) retrieve getrusage information about current process",
  "body": "# procinfo\r\n\r\n![Travis CI build status](https://api.travis-ci.org/mbbx6spp/ruby-procinfo.png)\r\n![Latest Github Tag](https://img.shields.io/github/tag/mbbx6spp/ruby-procinfo.svg)\r\n![Licensed under BSD-3-Clause](https://img.shields.io/github/license/mbbx6spp/ruby-procinfo.svg?maxAge=2592000?style=plastic)\r\n\r\nA Ruby/C extension packaged as a gem that provides a more uniform interface\r\nto \\*NIX process, system, and socket information.\r\n\r\nAt the moment it only implements process information retrieved from the\r\n`getrusage` POSIX system call for the current process (`SELF`) and children\r\nprocesses (`CHILDREN`) plus uname system information.\r\n\r\nThis is compatible with POSIX-compatible OSes.\r\n\r\n## Getting Started\r\n\r\nInstall it from the command-line via:\r\n\r\n```bash\r\n$ gem install ruby-procinfo\r\nSuccessfully installed ruby-procinfo-0.2.1-x86_64-linux\r\n1 gem installed\r\n```\r\n\r\nOr add it to your Ruby project at the end of your Gemfile like so:\r\n\r\n```ruby\r\ngem 'ruby-procinfo', '~>0.2.1'\r\n```\r\n\r\n## Example Usage\r\n\r\nRequire `'procinfo'`:\r\n\r\n```ruby\r\nirb(main):001:0> require 'procinfo'\r\n=> true\r\n```\r\n\r\nRetrieve rusage stats for all children processes:\r\n\r\n```ruby\r\nirb(main):002:0>\r\nirb(main):003:0* stats = Process.stats(:self)\r\n=> #<struct Struct::ProcStats user_time=0.185, system_time=0.017, max_rss=30652, shared_text_size=0, unshared_data_size=0, unshared_stack_size=0, page_reclaims=5954, page_faults=0, swaps=0, block_input_ops=0, block_output_ops=0, msgs_sent=0, msgs_recvd=0, signals_recvd=0, voluntary_switches=2, involuntary_switches=3>\r\nirb(main):004:0> stats.user_time\r\n=> 0.185\r\nirb(main):005:0> stats.system_time\r\n=> 0.017\r\nirb(main):006:0> stats.max_rss\r\n=> 30652\r\nirb(main):007:0> stats.page_faults\r\n=> 0\r\nirb(main):008:0> stats.msgs_sent\r\n=> 0\r\nirb(main):009:0> stats.msgs_recvd\r\n=> 0\r\nirb(main):010:0> stats.signals_recvd\r\n=> 0\r\nirb(main):011:0> stats.shared_text_size\r\n=> 0\r\nirb(main):012:0> stats.swaps\r\n=> 0\r\nirb(main):013:0> stats.block_input_ops\r\n=> 0\r\nirb(main):014:0> stats.block_output_ops\r\n=> 0\r\n```\r\n\r\nYou can also get uname information about the system your process is running\r\non:\r\n\r\n```ruby\r\nirb(main):021:0> sysinfo = System.uname\r\n=> #<struct Struct::SystemInfo sysname=\"Linux\", nodename=\"durga\", release=\"4.7.2\", version=\"#1-NixOS SMP Sat Aug 20 16:11:18 UTC 2016\", machine=\"x86_64\">\r\nirb(main):022:0> sysinfo.sysname\r\n=> \"Linux\"\r\nirb(main):023:0> sysinfo.nodename\r\n=> \"durga\"\r\nirb(main):024:0> sysinfo.release\r\n=> \"4.7.2\"\r\nirb(main):025:0> sysinfo.version\r\n=> \"#1-NixOS SMP Sat Aug 20 16:11:18 UTC 2016\"\r\nirb(main):026:0> sysinfo.machine\r\n=> \"x86_64\"\r\n```\r\n\r\n## Microbenchmarks\r\n\r\nThe reason I even bothered writing this tiny, focused gem is because while on\r\nvacation at a Rails shop I used to work at someone added a `ps ef | awk ...`\r\nshell from the Rails app every tenth request to get the RSS and decide if we\r\nshould kill the worker. Needless to say this was a crazy idea. As a consequence\r\nefficiency of this library was paramount so we could use it in the Rails app\r\nUnicorn worker hook as needed.\r\n\r\nSo here are some microbenchmarks for this APIs usage:\r\n\r\n\r\n### Ruby 1.9.2 (ruby-procinfo v0.2.1)\r\n\r\n```\r\n# Running benchmarks:\r\nProcess information retrieval          1        10         100      1000     10000\r\nbench_Process_stats             0.000013  0.000010    0.000008  0.000011  0.000009\r\nbench_Process_stats_children    0.000012  0.000009    0.000007  0.000007  0.000007\r\nbench_Process_stats_self        0.000011  0.000010    0.000009  0.000009  0.000007\r\nbench_System_uname              0.000016  0.000011    0.000006  0.000006  0.000008\r\nbench_Spawn_ps_rss              0.004176  0.004099    0.004035  0.003807  0.004230\r\nbench_POSIX_Spawn_popen4        0.001312  0.000916    0.000854  0.000826  0.000881\r\n\r\nFinished benchmarks in 0.128492s, 46.6957 tests/s, 46.6957 assertions/s.\r\n```\r\n\r\n### Ruby 1.9.3 (ruby-procinfo v0.2.1)\r\n\r\n```\r\n# Running benchmarks:\r\nProcess information retrieval          1        10         100      1000     10000\r\nbench_Process_stats             0.000016  0.000012    0.000007  0.000013  0.000008\r\nbench_Process_stats_children    0.000011  0.000008    0.000007  0.000021  0.000019\r\nbench_Process_stats_self        0.000013  0.000009    0.000008  0.000008  0.000008\r\nbench_System_uname              0.000014  0.000019    0.000006  0.000006  0.000006\r\nbench_Spawn_ps_rss              0.004153  0.003816    0.003519  0.003595  0.003377\r\nbench_POSIX_Spawn_popen4        0.001194  0.000802    0.000759  0.000808  0.000766\r\n\r\nFinished benchmarks in 0.093692s, 64.0394 tests/s, 64.0394 assertions/s.\r\n```\r\n\r\n### Ruby 2.0.0 (ruby-procinfo v0.2.1)\r\n\r\n```\r\n# Running benchmarks:\r\nProcess information retrieval        1          10         100      1000     10000\r\nbench_Process_stats           0.000023    0.000019    0.000017  0.000017  0.000018\r\nbench_Process_stats_children  0.000021    0.000016    0.000015  0.000014  0.000015\r\nbench_Process_stats_self      0.000020    0.000016    0.000013  0.000013  0.000013\r\nbench_System_uname            0.000022    0.000015    0.000013  0.000013  0.000012\r\nbench_Spawn_ps_rss            0.004301    0.003980    0.004084  0.003990  0.004178\r\nbench_POSIX_Spawn_popen4      0.001334    0.001059    0.001082  0.001121  0.001034\r\n\r\nFinished benchmarks in 0.215114s, 27.8922 tests/s, 27.8922 assertions/s.\r\n```\r\n\r\n### Ruby 2.1.10 (ruby-procinfo v0.2.1)\r\n\r\n```\r\n# Running benchmarks:\r\nProcess information retrieval       1         10           100      1000     10000\r\nbench_Process_stats          0.000012   0.000009      0.000008  0.000007  0.000007\r\nbench_Process_stats_children 0.000024   0.000008      0.000007  0.000016  0.000006\r\nbench_Process_stats_self     0.000010   0.000009      0.000007  0.000007  0.000007\r\nbench_System_uname           0.000015   0.000009      0.000006  0.000006  0.000006\r\nbench_Spawn_ps_rss           0.004606   0.003659      0.003500  0.003288  0.003414\r\nbench_POSIX_Spawn_popen4     0.001241   0.000906      0.000842  0.000798  0.000809\r\n\r\nFinished benchmarks in 0.118000s, 50.8476 tests/s, 50.8476 assertions/s.\r\n```\r\n\r\n### Ruby 2.2.5 (ruby-procinfo v0.2.1)\r\n\r\n```\r\n# Running benchmarks:\r\nProcess information retrieval       1         10           100      1000     10000\r\nbench_Process_stats          0.000014   0.000010      0.000008  0.000008  0.000008\r\nbench_Process_stats_children 0.000011   0.000011      0.000009  0.000007  0.000007\r\nbench_Process_stats_self     0.000011   0.000009      0.000008  0.000007  0.000008\r\nbench_System_uname           0.000010   0.000008      0.000006  0.000006  0.000006\r\nbench_Spawn_ps_rss           0.003457   0.002694      0.002744  0.002686  0.002616\r\nbench_POSIX_Spawn_popen4     0.001106   0.001408      0.000792  0.000753  0.000844\r\n\r\nFinished benchmarks in 0.109760s, 54.6649 tests/s, 54.6649 assertions/s.\r\n```\r\n\r\n### Ruby 2.3.0 (ruby-procinfo v0.2.1)\r\n\r\n```\r\n# Running benchmarks:\r\nProcess information retrieval       1         10           100      1000     10000\r\nbench_Process_stats          0.000016   0.000011      0.000010  0.000008  0.000008\r\nbench_Process_stats_children 0.000012   0.000009      0.000083  0.000007  0.000007\r\nbench_Process_stats_self     0.000016   0.000010      0.000007  0.000011  0.000010\r\nbench_System_uname           0.000014   0.000010      0.000008  0.000006  0.000009\r\nbench_Spawn_ps_rss           0.003747   0.003267      0.003297  0.003118  0.003217\r\nbench_POSIX_Spawn_popen4     0.001312   0.000996      0.000897  0.000895  0.000857\r\n\r\nFinished benchmarks in 0.140802s, 42.6129 tests/s, 42.6129 assertions/s.\r\n```\r\n\r\nThe above ran on my personal Macbook Pro development laptop running NixOS.\r\n\r\nThe point of the above isn't to pat myself on the back rather just to ensure\r\nI'm not smoking crack when I introduce new APIs and/or fix any bugs. It\r\nshould also warn you of not running the microbenchmark test suite on your\r\ntarget systems. You can do this by running the following:\r\n\r\n    bundle exec rake test\r\n\r\nYou should always sanity check your assumptions. Some assumptions are completely\r\nflawed, but even ones that seem reasonable should be validated in some scope and\r\nform.\r\n\r\n## Motivation\r\n\r\nI really needed to be able to get current RSS and max RSS information (and\r\nrelated process information) for a given process (which may or may not be\r\nthe current running process). No Ruby library (as far as I found) offered a\r\nconsistent view of this information across the most \\*NIX OSes and were\r\ncurrently maintained with tests.\r\n\r\nPlus this is a great exercise for me after forgetting C after 11 years of\r\nnot developing with it. It's a breath of fresh air.\r\n\r\n## Related Works\r\n\r\n`sys-proctable` is Ruby/C extension library that provides this to some\r\ndegree. I wanted to use a different approach to this library and lower\r\noverhead, and compatibility of APIs exposed for all the supporting OSes.\r\n\r\nHowever, the above mentioned library may offer what you need.\r\n\r\n## TODO\r\n\r\nLots to do still.\r\n\r\nLonger-term I would like to do the following:\r\n\r\n* Add socket/connection retrieval from the system based on state (e.g. `CLOSE_WAIT`)\r\n\r\n## License\r\n\r\nThis code is shared under the BSD 3-clause license. See LICENSE for\r\nmore information.\r\n\r\n## Author(s)\r\n\r\n* [Susan Potter](http://susanpotter.net) <me at susanpotter do net> (mbbx6spp on GitHub)\r\n\r\n## Contributor(s)\r\n\r\nN/A\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}