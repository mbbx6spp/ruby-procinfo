{"name":"Ruby-procinfo","tagline":"A very simple Ruby/C extension to (at the moment) retrieve getrusage information about current process","body":"# procinfo\r\n\r\n![Travis CI build status](https://api.travis-ci.org/mbbx6spp/ruby-procinfo.png)\r\n\r\nA Ruby/C extension packaged as a gem that provides a more uniform interface\r\nto \\*NIX process, system, and socket information.\r\n\r\n\r\nAt the moment it only implements process information retrieved from the\r\n`getrusage` POSIX system call for the current process (`SELF`) and children\r\nprocesses (`CHILDREN`) plus uname system information.\r\n\r\nThis is compatible with POSIX-compatible OSes.\r\n\r\n## Example Usage\r\n\r\nRetrieve rusage stats for all children processes:\r\n\r\n```ruby\r\nstats = Process.stats(:children)\r\nputs stats.user_time, stats.system_time\r\n# some useful fields, but few others supported\r\nputs stats.max_rss\r\nputs stats.page_faults\r\nputs stats.msgs_sent\r\nputs stats.msgs_recvd\r\nputs stats.signals_recvd\r\nputs stats.shared_text_size\r\nputs stats.swaps\r\nputs stats.block_input_ops\r\nputs stats.block_output_ops\r\n```\r\n\r\nYou can also get uname information about the system your process is running\r\non:\r\n\r\n```ruby\r\nsysinfo = System.uname\r\nputs sysinfo.sysname\r\nputs sysinfo.nodename\r\nputs sysinfo.release\r\nputs sysinfo.version\r\nputs sysinfo.machine\r\n```\r\n\r\n## Micro Benchmarks\r\n\r\nThis is only useful if you need to poll this information often, so use judiciously:\r\n\r\n```\r\n# Running benchmarks:\r\n\r\n\r\nProcess information retrieval            1              10             100            1000           10000\r\nbench_POSIX_Spawn_popen4          0.005980        0.025996        0.004227        0.002901        0.002780\r\nbench_Process_stats               0.000048        0.000041        0.000034        0.000035        0.000036\r\nbench_Process_stats_children      0.000042        0.000038        0.000034        0.000031        0.000032\r\nbench_Process_stats_self          0.000048        0.000046        0.000032        0.000033        0.000035\r\nbench_Spawn_ps_rss                0.050123        0.020579        0.043924        0.058219        0.064938\r\nbench_System_uname                0.000042        0.000031        0.000027        0.000027        0.000026\r\n\r\n\r\nFinished benchmarks in 0.673457s, 8.9093 tests/s, 8.9093 assertions/s.\r\n\r\n6 tests, 6 assertions, 0 failures, 0 errors, 0 skips\r\n```\r\n\r\nThe control micro benchmarks are `bench_POSIX_Spawn_popen4` and `bench_Spawn_ps_rss`. As you can see comparatively this gem (since it is a Ruby/C extension) is pretty efficient.\r\n\r\n## Motivation\r\n\r\nI really needed to be able to get current RSS and max RSS information (and\r\nrelated process information) for a given process (which may or may not be\r\nthe current running process). No Ruby library (as far as I found) offered a\r\nconsistent view of this information across the most \\*NIX OSes and were\r\ncurrently maintained with tests.\r\n\r\nPlus this is a great exercise for me after forgetting C after 11 years of\r\nnot developing with it. It's a breath of fresh air.\r\n\r\n## Related Works\r\n\r\n`sys-proctable` is Ruby/C extension library that provides this to some\r\ndegree. I wanted to use a different approach to this library and lower\r\noverhead, and compatibility of APIs exposed for all the supporting OSes.\r\n\r\nHowever, the above mentioned library may offer what you need.\r\n\r\n## TODO\r\n\r\nLots to do still.\r\n\r\nLonger-term I would like to do the following:\r\n\r\n* Add socket/connection retrieval from the system based on state (e.g. `CLOSE_WAIT`)\r\n\r\n## License\r\n\r\nThis code is shared under the BSD 3-clause license. See LICENSE for\r\nmore information.\r\n\r\n## Author(s)\r\n\r\n* [Susan Potter](http://susanpotter.net) <me at susanpotter do net> (mbbx6spp on GitHub)\r\n\r\n## Contributor(s)\r\n\r\nN/A","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}